AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Lambda deployment with scheduled and HTTP triggers
Parameters:
  S3Bucket:
    Description: S3 bucket to store Lambda code
    Type: String
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: LambdaExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:PutObject
            Resource: arn:aws:s3:::*
          - Effect: Allow
            Action:
            - glue:GetTable
            - glue:GetTables
            - glue:CreateTable
            - glue:UpdateTable
            Resource: arn:aws:glue:*:*:*
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource: arn:aws:secretsmanager:*:*:secret:*
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: handler.lambda_handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Code:
        S3Bucket:
          Ref: S3Bucket
        S3Key: lambda.zip
      Runtime: python3.11
      Environment:
        Variables:
          AWS_REGION:
            Ref: AWS::Region
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: LambdaApi
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - ApiGateway
        - RootResourceId
      PathPart: '{proxy+}'
      RestApiId:
        Ref: ApiGateway
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId:
        Ref: ApiGatewayResource
      RestApiId:
        Ref: ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
  LambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: LambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*
  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(30 minutes)
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - LambdaFunction
          - Arn
        Id: LambdaFunctionTarget
  LambdaPermissionEventBridge:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: LambdaFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - EventBridgeRule
        - Arn
Outputs:
  ApiUrl:
    Description: API Gateway URL
    Value:
      Fn::Sub: https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/
