AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: Social Media Analytics Enrichment Lambda Functions

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment name

  OpenAISecretName:
    Type: String
    Default: ptdata/openai
    Description: Name of the secret containing OpenAI credentials

Globals:
  Function:
    Timeout: 900
    MemorySize: 1024
    Runtime: python3.11
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        OPENAI_SECRET_NAME: !Ref OpenAISecretName
        PYTHONPATH: /var/task:/var/task/src

Resources:
  UserNeedsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-user-needs"
      CodeUri: .
      Handler: handler.lambda_handler
      PackageType: Zip
      AutoPublishAlias: live
      Events:
        Schedule:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: rate(30 minutes)
            Input: '{"path": "/user_needs", "queryStringParameters": {"max_records": "10000"}}'
            RetryPolicy:
              MaximumRetryAttempts: 2
              MaximumEventAgeInSeconds: 1500
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${OpenAISecretName}-*"
            - Effect: Allow
              Action:
                - glue:*
                - s3:*
              Resource: "*"

  ModelInferenceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-model-inference"
      CodeUri: .
      Handler: handler.lambda_handler
      PackageType: Zip
      AutoPublishAlias: live
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{model}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${OpenAISecretName}-*"
            - Effect: Allow
              Action:
                - glue:*
                - s3:*
              Resource: "*"

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'GET,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
